
#include "MultivariateRenderer.h"

int main(int argc, char *argv[]) {


  // This is a simple volume rendering example that
  // uses a vtkFixedPointVolumeRayCastMapper

  // Create the standard renderer, render window
  // and interactor
  vtkSmartPointer<vtkNamedColors> colors =
      vtkSmartPointer<vtkNamedColors>::New();

  vtkSmartPointer<vtkRenderer> ren1 = vtkSmartPointer<vtkRenderer>::New();

  vtkSmartPointer<vtkRenderWindow> renWin =
      vtkSmartPointer<vtkRenderWindow>::New();
  renWin->AddRenderer(ren1);

  vtkSmartPointer<vtkRenderWindowInteractor> iren =
      vtkSmartPointer<vtkRenderWindowInteractor>::New();
  iren->SetRenderWindow(renWin);

  // Create the reader for the data
  vtkSmartPointer<vtkImageReader2> reader =
      vtkSmartPointer<vtkImageReader2>::New();
  reader->SetFileName("/run/media/ukabuer/B6A8919FA8915F25/lsabel_8bit_500_500_100/Pf/Pf18.bin");
  reader->SetFileDimensionality(3);
  reader->SetDataSpacing(1, 1, 1);
  reader->SetDataOrigin(0.0, 0.0, 0.0);
  reader->SetDataScalarType(VTK_UNSIGNED_CHAR);
  reader->SetDataExtent(0, 499, 0, 499, 0, 99);
  reader->SetDataByteOrderToLittleEndian();
  reader->UpdateWholeExtent();

  vtkSmartPointer<vtkImageReader2> reader2 =
      vtkSmartPointer<vtkImageReader2>::New();
  reader2->SetFileName("/run/media/ukabuer/B6A8919FA8915F25/lsabel_8bit_500_500_100/TCf/TCf18.bin");
  reader2->SetFileDimensionality(3);
  reader2->SetDataSpacing(1, 1, 1);
  reader2->SetDataOrigin(0.0, 0.0, 0.0);
  reader2->SetDataScalarType(VTK_UNSIGNED_CHAR);
  reader2->SetDataExtent(0, 499, 0, 499, 0, 99);
  reader2->SetDataByteOrderToLittleEndian();
  reader2->UpdateWholeExtent();

  // Create transfer mapping scalar value to opacity
  vtkSmartPointer<vtkPiecewiseFunction> opacityTransferFunction =
      vtkSmartPointer<vtkPiecewiseFunction>::New();
  opacityTransferFunction->AddPoint(60, 0.0);
  opacityTransferFunction->AddPoint(255, 0.2);

  // Create transfer mapping scalar value to color
  vtkSmartPointer<vtkColorTransferFunction> colorTransferFunction =
      vtkSmartPointer<vtkColorTransferFunction>::New();
  colorTransferFunction->AddRGBPoint(0.0, 0.0, 0.0, 0.0);
  colorTransferFunction->AddRGBPoint(64.0, 1.0, 0.0, 0.0);
  colorTransferFunction->AddRGBPoint(128.0, 0.0, 0.0, 1.0);
  colorTransferFunction->AddRGBPoint(192.0, 0.0, 1.0, 0.0);
  colorTransferFunction->AddRGBPoint(255.0, 0.0, 0.2, 0.0);

  // The property describes how the data will look
  vtkSmartPointer<vtkVolumeProperty> volumeProperty =
      vtkSmartPointer<vtkVolumeProperty>::New();
  volumeProperty->SetColor(colorTransferFunction);
  volumeProperty->SetScalarOpacity(opacityTransferFunction);
  volumeProperty->ShadeOn();
  volumeProperty->SetInterpolationTypeToLinear();


  vtkNew<vtkGPUVolumeRayCastMapper> mapper;
  mapper->SetInputConnection(0, reader->GetOutputPort());
  mapper->SetInputConnection(3, reader2->GetOutputPort());
  mapper->SetUseJittering(1);

  vtkNew<vtkVolume> vol;
  vol->SetMapper(mapper);
  vol->SetProperty(volumeProperty);

  vtkNew<vtkVolume> vol2;
  vol2->SetMapper(mapper);
  vol2->SetProperty(volumeProperty);
//   vol2->SetScale(1.8, 1.8, 1.8);
//   vol2->SetPosition(100., 100., 0.);

  vtkNew<vtkMultiVolume> volumes;
  volumes->SetMapper(mapper);

  volumes->SetVolume(vol, 0);
  volumes->SetVolume(vol2, 3);
 
  ren1->AddVolume(volumes);
  ren1->SetBackground(colors->GetColor3d("Wheat").GetData());
  ren1->GetActiveCamera()->Azimuth(45);
  ren1->GetActiveCamera()->Elevation(30);
  ren1->ResetCameraClippingRange();
  ren1->ResetCamera();
  ren1->Render();

  vtkSmartPointer<vtkPNGWriter> writer = vtkSmartPointer<vtkPNGWriter>::New();
  writer->SetFileName("screenshot2.png");
  writer->SetInputConnection(windowToImageFilter->GetOutputPort());
  writer->Write();

  renWin->SetSize(600, 600);
  renWin->Render();

  iren->Start();

  return EXIT_SUCCESS;
}
